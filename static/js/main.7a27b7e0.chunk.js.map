{"version":3,"sources":["components/contacts/FormContacts.js","components/TodoList/TodoList.js","components/Filter/Filter.js","components/TodoEditor/TodoEditor.js","App.js","index.js"],"names":["FormContacts","state","name","number","nameInputId","shortid","generate","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","id","onChange","Component","TodoList","contacts","onDeleteTodo","className","map","onClick","Filter","filter","App","addTodo","prevState","deleteTodo","contactId","contact","formSubmitHandler","data","console","log","changeFilter","currentTarget","getVisibleTodos","normalizedFilter","toLowerCase","includes","visibleTodos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a27b7e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n  //ставим npm i shortid\r\n  import shortid from 'shortid';\r\n\r\nclass FormContacts extends Component {\r\n  state = {\r\n    name: '',\r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n      // console.log(this.state)\r\n      //перекидываем данные в апп\r\n      this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n             //  pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n            \r\n                \r\n          <button type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n           \r\n      );\r\n    }\r\n}\r\nexport default FormContacts;","import React from 'react';\r\nimport './TodoList.css'\r\n\r\nconst TodoList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\n//его стейт в арр\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label>\r\n    Фильтр по имени\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\n\r\nclass TodoEditor extends Component {\r\n\r\n    state = {\r\n        message: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n    this.setState({ message: e.currentTarget.value });\r\n    };\r\n    \r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        // console.log(this.state)\r\n         this.props.onSubmit(this.state.message);\r\n\r\n         this.setState({ message: '' });\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form   onSubmit={this.handleSubmit}>\r\n                <textarea\r\n                    value={this.state.message}\r\n                    onChange={this.handleChange}\r\n                ></textarea>\r\n                <button type=\"submit\">\r\n                    Сохранить\r\n                 </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoEditor;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport FormContacts from './components/contacts/FormContacts';\n\nimport TodoList from './components/TodoList/TodoList';\n\nimport TodoEditor from './components/TodoEditor/TodoEditor';\n\nimport Filter from './components/Filter/Filter';\n\n\nclass App extends Component {\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  };\n\n  addTodo = (name, number) => {\n    const contacts = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    }\n  //обновляем состояние от предыдущего добавляем элемент, а стейте арр идет обновление\n    this.setState(prevState => ({\n      contacts: [contacts, ...prevState.contacts],\n    })\n    );\n    // this.setState(({ todos }) => ({\n    //   todos: [todo, ...todos],\n    // }));\n  };\n\n//убираем елемент , чей id совпадает\n   deleteTodo = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n  \n   \n  //получаем пропы с формы\n     formSubmitHandler = data => {\n      console.log(data)\n     }\n  \n   changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n   };\n  \n  getVisibleTodos = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  \n    render() {\n      const { contacts, filter } = this.state\n      const visibleTodos = this.getVisibleTodos();\n      \n      return (\n        <>\n         \n          {/* <TodoEditor onSubmit={this.addTodo} /> */}\n          <Filter filter={filter} onChange={ this.changeFilter}/>\n          {/* <FormContacts onSubmit={this.formSubmitHandler} /> */}\n        <FormContacts onSubmit={this.addTodo} />\n          <TodoList contacts={visibleTodos} onDeleteTodo={this.deleteTodo} />\n        </>\n      );\n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}